// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent_api.proto

/*
Package kolide_agent is a generated protocol buffer package.

It is generated from these files:
	agent_api.proto

It has these top-level messages:
	AgentApiRequest
	AgentApiResponse
	EnrollmentRequest
	EnrollmentResponse
	ConfigResponse
	LogCollection
	QueryCollection
	ResultCollection
*/
package kolide_agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AGENT is added as a new log type, for adding new
// logging capabilities from kolide/agent
type LogCollection_LogType int32

const (
	LogCollection_RESULT LogCollection_LogType = 0
	LogCollection_STATUS LogCollection_LogType = 1
	LogCollection_AGENT  LogCollection_LogType = 2
)

var LogCollection_LogType_name = map[int32]string{
	0: "RESULT",
	1: "STATUS",
	2: "AGENT",
}
var LogCollection_LogType_value = map[string]int32{
	"RESULT": 0,
	"STATUS": 1,
	"AGENT":  2,
}

func (x LogCollection_LogType) String() string {
	return proto.EnumName(LogCollection_LogType_name, int32(x))
}
func (LogCollection_LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type AgentApiRequest struct {
	NodeKey      string `protobuf:"bytes,1,opt,name=node_key,json=nodeKey" json:"node_key,omitempty"`
	AgentVersion string `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion" json:"agent_version,omitempty"`
}

func (m *AgentApiRequest) Reset()                    { *m = AgentApiRequest{} }
func (m *AgentApiRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentApiRequest) ProtoMessage()               {}
func (*AgentApiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AgentApiRequest) GetNodeKey() string {
	if m != nil {
		return m.NodeKey
	}
	return ""
}

func (m *AgentApiRequest) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

type AgentApiResponse struct {
	Message     string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ErrorCode   string `protobuf:"bytes,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	NodeInvalid bool   `protobuf:"varint,3,opt,name=node_invalid,json=nodeInvalid" json:"node_invalid,omitempty"`
}

func (m *AgentApiResponse) Reset()                    { *m = AgentApiResponse{} }
func (m *AgentApiResponse) String() string            { return proto.CompactTextString(m) }
func (*AgentApiResponse) ProtoMessage()               {}
func (*AgentApiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AgentApiResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AgentApiResponse) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *AgentApiResponse) GetNodeInvalid() bool {
	if m != nil {
		return m.NodeInvalid
	}
	return false
}

type EnrollmentRequest struct {
	EnrollSecret   string `protobuf:"bytes,1,opt,name=enroll_secret,json=enrollSecret" json:"enroll_secret,omitempty"`
	HostIdentifier string `protobuf:"bytes,2,opt,name=host_identifier,json=hostIdentifier" json:"host_identifier,omitempty"`
}

func (m *EnrollmentRequest) Reset()                    { *m = EnrollmentRequest{} }
func (m *EnrollmentRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollmentRequest) ProtoMessage()               {}
func (*EnrollmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EnrollmentRequest) GetEnrollSecret() string {
	if m != nil {
		return m.EnrollSecret
	}
	return ""
}

func (m *EnrollmentRequest) GetHostIdentifier() string {
	if m != nil {
		return m.HostIdentifier
	}
	return ""
}

type EnrollmentResponse struct {
	NodeKey     string `protobuf:"bytes,1,opt,name=node_key,json=nodeKey" json:"node_key,omitempty"`
	NodeInvalid bool   `protobuf:"varint,2,opt,name=node_invalid,json=nodeInvalid" json:"node_invalid,omitempty"`
}

func (m *EnrollmentResponse) Reset()                    { *m = EnrollmentResponse{} }
func (m *EnrollmentResponse) String() string            { return proto.CompactTextString(m) }
func (*EnrollmentResponse) ProtoMessage()               {}
func (*EnrollmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EnrollmentResponse) GetNodeKey() string {
	if m != nil {
		return m.NodeKey
	}
	return ""
}

func (m *EnrollmentResponse) GetNodeInvalid() bool {
	if m != nil {
		return m.NodeInvalid
	}
	return false
}

// kolide/cloud will be generating well-structured json already, so forward
// it along instead of de/re/de-serializing it as a protobuf too
// this might make sense to convert to full proto later
type ConfigResponse struct {
	ConfigJsonBlob string `protobuf:"bytes,1,opt,name=config_json_blob,json=configJsonBlob" json:"config_json_blob,omitempty"`
	NodeInvalid    bool   `protobuf:"varint,2,opt,name=node_invalid,json=nodeInvalid" json:"node_invalid,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigResponse) GetConfigJsonBlob() string {
	if m != nil {
		return m.ConfigJsonBlob
	}
	return ""
}

func (m *ConfigResponse) GetNodeInvalid() bool {
	if m != nil {
		return m.NodeInvalid
	}
	return false
}

type LogCollection struct {
	NodeKey string                `protobuf:"bytes,1,opt,name=node_key,json=nodeKey" json:"node_key,omitempty"`
	LogType LogCollection_LogType `protobuf:"varint,2,opt,name=log_type,json=logType,enum=kolide.agent.LogCollection_LogType" json:"log_type,omitempty"`
	Logs    []*LogCollection_Log  `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *LogCollection) Reset()                    { *m = LogCollection{} }
func (m *LogCollection) String() string            { return proto.CompactTextString(m) }
func (*LogCollection) ProtoMessage()               {}
func (*LogCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogCollection) GetNodeKey() string {
	if m != nil {
		return m.NodeKey
	}
	return ""
}

func (m *LogCollection) GetLogType() LogCollection_LogType {
	if m != nil {
		return m.LogType
	}
	return LogCollection_RESULT
}

func (m *LogCollection) GetLogs() []*LogCollection_Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogCollection_Log struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *LogCollection_Log) Reset()                    { *m = LogCollection_Log{} }
func (m *LogCollection_Log) String() string            { return proto.CompactTextString(m) }
func (*LogCollection_Log) ProtoMessage()               {}
func (*LogCollection_Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *LogCollection_Log) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// a query collection contains many queries
type QueryCollection struct {
	Queries     []*QueryCollection_Query `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	NodeInvalid bool                     `protobuf:"varint,2,opt,name=node_invalid,json=nodeInvalid" json:"node_invalid,omitempty"`
}

func (m *QueryCollection) Reset()                    { *m = QueryCollection{} }
func (m *QueryCollection) String() string            { return proto.CompactTextString(m) }
func (*QueryCollection) ProtoMessage()               {}
func (*QueryCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryCollection) GetQueries() []*QueryCollection_Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *QueryCollection) GetNodeInvalid() bool {
	if m != nil {
		return m.NodeInvalid
	}
	return false
}

type QueryCollection_Query struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *QueryCollection_Query) Reset()                    { *m = QueryCollection_Query{} }
func (m *QueryCollection_Query) String() string            { return proto.CompactTextString(m) }
func (*QueryCollection_Query) ProtoMessage()               {}
func (*QueryCollection_Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *QueryCollection_Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryCollection_Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// a result collection contains many results
type ResultCollection struct {
	NodeKey string                     `protobuf:"bytes,1,opt,name=node_key,json=nodeKey" json:"node_key,omitempty"`
	Results []*ResultCollection_Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *ResultCollection) Reset()                    { *m = ResultCollection{} }
func (m *ResultCollection) String() string            { return proto.CompactTextString(m) }
func (*ResultCollection) ProtoMessage()               {}
func (*ResultCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResultCollection) GetNodeKey() string {
	if m != nil {
		return m.NodeKey
	}
	return ""
}

func (m *ResultCollection) GetResults() []*ResultCollection_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

// status is moved here instead of appearing as a map of id[status]
// on the ResultCollection, as it does in the osq docs
type ResultCollection_Result struct {
	Id     string                               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rows   []*ResultCollection_Result_ResultRow `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	Status int32                                `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *ResultCollection_Result) Reset()                    { *m = ResultCollection_Result{} }
func (m *ResultCollection_Result) String() string            { return proto.CompactTextString(m) }
func (*ResultCollection_Result) ProtoMessage()               {}
func (*ResultCollection_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *ResultCollection_Result) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResultCollection_Result) GetRows() []*ResultCollection_Result_ResultRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ResultCollection_Result) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ResultCollection_Result_ResultRow struct {
	Columns []*ResultCollection_Result_ResultRow_Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (m *ResultCollection_Result_ResultRow) Reset()         { *m = ResultCollection_Result_ResultRow{} }
func (m *ResultCollection_Result_ResultRow) String() string { return proto.CompactTextString(m) }
func (*ResultCollection_Result_ResultRow) ProtoMessage()    {}
func (*ResultCollection_Result_ResultRow) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0, 0}
}

func (m *ResultCollection_Result_ResultRow) GetColumns() []*ResultCollection_Result_ResultRow_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ResultCollection_Result_ResultRow_Column struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ResultCollection_Result_ResultRow_Column) Reset() {
	*m = ResultCollection_Result_ResultRow_Column{}
}
func (m *ResultCollection_Result_ResultRow_Column) String() string { return proto.CompactTextString(m) }
func (*ResultCollection_Result_ResultRow_Column) ProtoMessage()    {}
func (*ResultCollection_Result_ResultRow_Column) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0, 0, 0}
}

func (m *ResultCollection_Result_ResultRow_Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResultCollection_Result_ResultRow_Column) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*AgentApiRequest)(nil), "kolide.agent.AgentApiRequest")
	proto.RegisterType((*AgentApiResponse)(nil), "kolide.agent.AgentApiResponse")
	proto.RegisterType((*EnrollmentRequest)(nil), "kolide.agent.EnrollmentRequest")
	proto.RegisterType((*EnrollmentResponse)(nil), "kolide.agent.EnrollmentResponse")
	proto.RegisterType((*ConfigResponse)(nil), "kolide.agent.ConfigResponse")
	proto.RegisterType((*LogCollection)(nil), "kolide.agent.LogCollection")
	proto.RegisterType((*LogCollection_Log)(nil), "kolide.agent.LogCollection.Log")
	proto.RegisterType((*QueryCollection)(nil), "kolide.agent.QueryCollection")
	proto.RegisterType((*QueryCollection_Query)(nil), "kolide.agent.QueryCollection.Query")
	proto.RegisterType((*ResultCollection)(nil), "kolide.agent.ResultCollection")
	proto.RegisterType((*ResultCollection_Result)(nil), "kolide.agent.ResultCollection.Result")
	proto.RegisterType((*ResultCollection_Result_ResultRow)(nil), "kolide.agent.ResultCollection.Result.ResultRow")
	proto.RegisterType((*ResultCollection_Result_ResultRow_Column)(nil), "kolide.agent.ResultCollection.Result.ResultRow.Column")
	proto.RegisterEnum("kolide.agent.LogCollection_LogType", LogCollection_LogType_name, LogCollection_LogType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Api service

type ApiClient interface {
	// Attempt to enroll a host with kolide/cloud
	RequestEnrollment(ctx context.Context, in *EnrollmentRequest, opts ...grpc.CallOption) (*EnrollmentResponse, error)
	// request an updated configuration from kolide/cloud
	// a generic request object is sent
	RequestConfig(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// request/pull Dist queries from kolide/cloud
	// a generic request object is sent
	RequestQueries(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (*QueryCollection, error)
	// publish logs from osqueryd to kolide/cloud
	// a generic response object is returned
	PublishLogs(ctx context.Context, in *LogCollection, opts ...grpc.CallOption) (*AgentApiResponse, error)
	// publish results from Dist queries to kolide/cloud
	// a generic response object is returned
	PublishResults(ctx context.Context, in *ResultCollection, opts ...grpc.CallOption) (*AgentApiResponse, error)
	// pushed configurations
	HotConfigure(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (Api_HotConfigureClient, error)
	// this would be live query push to agent, and response back to kolide/cloud
	HotlineBling(ctx context.Context, opts ...grpc.CallOption) (Api_HotlineBlingClient, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) RequestEnrollment(ctx context.Context, in *EnrollmentRequest, opts ...grpc.CallOption) (*EnrollmentResponse, error) {
	out := new(EnrollmentResponse)
	err := grpc.Invoke(ctx, "/kolide.agent.Api/RequestEnrollment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RequestConfig(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/kolide.agent.Api/RequestConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RequestQueries(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (*QueryCollection, error) {
	out := new(QueryCollection)
	err := grpc.Invoke(ctx, "/kolide.agent.Api/RequestQueries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PublishLogs(ctx context.Context, in *LogCollection, opts ...grpc.CallOption) (*AgentApiResponse, error) {
	out := new(AgentApiResponse)
	err := grpc.Invoke(ctx, "/kolide.agent.Api/PublishLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PublishResults(ctx context.Context, in *ResultCollection, opts ...grpc.CallOption) (*AgentApiResponse, error) {
	out := new(AgentApiResponse)
	err := grpc.Invoke(ctx, "/kolide.agent.Api/PublishResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) HotConfigure(ctx context.Context, in *AgentApiRequest, opts ...grpc.CallOption) (Api_HotConfigureClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[0], c.cc, "/kolide.agent.Api/HotConfigure", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiHotConfigureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_HotConfigureClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type apiHotConfigureClient struct {
	grpc.ClientStream
}

func (x *apiHotConfigureClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) HotlineBling(ctx context.Context, opts ...grpc.CallOption) (Api_HotlineBlingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[1], c.cc, "/kolide.agent.Api/HotlineBling", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiHotlineBlingClient{stream}
	return x, nil
}

type Api_HotlineBlingClient interface {
	Send(*ResultCollection) error
	Recv() (*QueryCollection, error)
	grpc.ClientStream
}

type apiHotlineBlingClient struct {
	grpc.ClientStream
}

func (x *apiHotlineBlingClient) Send(m *ResultCollection) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiHotlineBlingClient) Recv() (*QueryCollection, error) {
	m := new(QueryCollection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Api service

type ApiServer interface {
	// Attempt to enroll a host with kolide/cloud
	RequestEnrollment(context.Context, *EnrollmentRequest) (*EnrollmentResponse, error)
	// request an updated configuration from kolide/cloud
	// a generic request object is sent
	RequestConfig(context.Context, *AgentApiRequest) (*ConfigResponse, error)
	// request/pull Dist queries from kolide/cloud
	// a generic request object is sent
	RequestQueries(context.Context, *AgentApiRequest) (*QueryCollection, error)
	// publish logs from osqueryd to kolide/cloud
	// a generic response object is returned
	PublishLogs(context.Context, *LogCollection) (*AgentApiResponse, error)
	// publish results from Dist queries to kolide/cloud
	// a generic response object is returned
	PublishResults(context.Context, *ResultCollection) (*AgentApiResponse, error)
	// pushed configurations
	HotConfigure(*AgentApiRequest, Api_HotConfigureServer) error
	// this would be live query push to agent, and response back to kolide/cloud
	HotlineBling(Api_HotlineBlingServer) error
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_RequestEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RequestEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kolide.agent.Api/RequestEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RequestEnrollment(ctx, req.(*EnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_RequestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RequestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kolide.agent.Api/RequestConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RequestConfig(ctx, req.(*AgentApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_RequestQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RequestQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kolide.agent.Api/RequestQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RequestQueries(ctx, req.(*AgentApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PublishLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PublishLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kolide.agent.Api/PublishLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PublishLogs(ctx, req.(*LogCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PublishResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PublishResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kolide.agent.Api/PublishResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PublishResults(ctx, req.(*ResultCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_HotConfigure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentApiRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).HotConfigure(m, &apiHotConfigureServer{stream})
}

type Api_HotConfigureServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type apiHotConfigureServer struct {
	grpc.ServerStream
}

func (x *apiHotConfigureServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_HotlineBling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).HotlineBling(&apiHotlineBlingServer{stream})
}

type Api_HotlineBlingServer interface {
	Send(*QueryCollection) error
	Recv() (*ResultCollection, error)
	grpc.ServerStream
}

type apiHotlineBlingServer struct {
	grpc.ServerStream
}

func (x *apiHotlineBlingServer) Send(m *QueryCollection) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiHotlineBlingServer) Recv() (*ResultCollection, error) {
	m := new(ResultCollection)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kolide.agent.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestEnrollment",
			Handler:    _Api_RequestEnrollment_Handler,
		},
		{
			MethodName: "RequestConfig",
			Handler:    _Api_RequestConfig_Handler,
		},
		{
			MethodName: "RequestQueries",
			Handler:    _Api_RequestQueries_Handler,
		},
		{
			MethodName: "PublishLogs",
			Handler:    _Api_PublishLogs_Handler,
		},
		{
			MethodName: "PublishResults",
			Handler:    _Api_PublishResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HotConfigure",
			Handler:       _Api_HotConfigure_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HotlineBling",
			Handler:       _Api_HotlineBling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent_api.proto",
}

func init() { proto.RegisterFile("agent_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x8d, 0x9d, 0xbf, 0x66, 0x9a, 0xbf, 0xae, 0x3e, 0x7d, 0x4a, 0x0d, 0x2d, 0xc1, 0x15, 0x22,
	0x17, 0x10, 0xaa, 0x54, 0xe2, 0x0e, 0x50, 0x1a, 0x55, 0x50, 0x08, 0x55, 0xe3, 0xa4, 0x88, 0x1b,
	0x64, 0x39, 0xf1, 0xd6, 0x5d, 0xba, 0xd9, 0x4d, 0xbd, 0x76, 0xab, 0x3c, 0x02, 0x97, 0xbc, 0x02,
	0xef, 0xc2, 0xbb, 0xf0, 0x0c, 0x5c, 0x21, 0xaf, 0xd7, 0x69, 0x93, 0xaa, 0x69, 0x10, 0x77, 0x3b,
	0xc7, 0x33, 0x67, 0xcf, 0xcc, 0xce, 0x8c, 0xa1, 0xe2, 0x78, 0x98, 0x05, 0xb6, 0x33, 0x21, 0xcd,
	0x89, 0xcf, 0x03, 0x8e, 0x8a, 0xe7, 0x9c, 0x12, 0x17, 0x37, 0x25, 0x6e, 0xf6, 0xa0, 0xd2, 0x8e,
	0x0e, 0xed, 0x09, 0xb1, 0xf0, 0x45, 0x88, 0x45, 0x80, 0x36, 0x61, 0x8d, 0x71, 0x17, 0xdb, 0xe7,
	0x78, 0x5a, 0xd3, 0xea, 0x5a, 0xa3, 0x60, 0xe5, 0x23, 0xfb, 0x03, 0x9e, 0xa2, 0x1d, 0x28, 0xc5,
	0x74, 0x97, 0xd8, 0x17, 0x84, 0xb3, 0x9a, 0x2e, 0xbf, 0x17, 0x25, 0xf8, 0x29, 0xc6, 0x4c, 0x06,
	0xd5, 0x6b, 0x4a, 0x31, 0xe1, 0x4c, 0x60, 0x54, 0x83, 0xfc, 0x18, 0x0b, 0xe1, 0x78, 0x38, 0xa1,
	0x54, 0x26, 0xda, 0x02, 0xc0, 0xbe, 0xcf, 0x7d, 0x7b, 0xc4, 0x5d, 0xac, 0xf8, 0x0a, 0x12, 0xe9,
	0x70, 0x17, 0xa3, 0xc7, 0x50, 0x94, 0x62, 0x08, 0xbb, 0x74, 0x28, 0x71, 0x6b, 0xe9, 0xba, 0xd6,
	0x58, 0xb3, 0xd6, 0x23, 0xec, 0x30, 0x86, 0x4c, 0x07, 0x36, 0x0e, 0x98, 0xcf, 0x29, 0x1d, 0x63,
	0x16, 0x24, 0x49, 0xec, 0x40, 0x09, 0x4b, 0xd0, 0x16, 0x78, 0xe4, 0xe3, 0x40, 0x5d, 0x5b, 0x8c,
	0xc1, 0xbe, 0xc4, 0xd0, 0x53, 0xa8, 0x9c, 0x71, 0x11, 0xd8, 0xc4, 0xc5, 0x2c, 0x20, 0xa7, 0x04,
	0xfb, 0x4a, 0x40, 0x39, 0x82, 0x0f, 0x67, 0xa8, 0x69, 0x01, 0xba, 0x79, 0x85, 0x4a, 0x6a, 0x49,
	0xa1, 0x16, 0x65, 0xeb, 0xb7, 0x65, 0x7f, 0x81, 0x72, 0x87, 0xb3, 0x53, 0xe2, 0xcd, 0xf8, 0x1a,
	0x50, 0x1d, 0x49, 0xc4, 0xfe, 0x2a, 0x38, 0xb3, 0x87, 0x94, 0x0f, 0x15, 0x6f, 0x39, 0xc6, 0xdf,
	0x0b, 0xce, 0xf6, 0x29, 0x1f, 0xae, 0x42, 0xff, 0x4b, 0x83, 0x52, 0x97, 0x7b, 0x1d, 0x4e, 0x29,
	0x1e, 0x05, 0x84, 0xb3, 0x65, 0x72, 0x5f, 0xc3, 0x1a, 0xe5, 0x9e, 0x1d, 0x4c, 0x27, 0xf1, 0x13,
	0x94, 0x5b, 0x3b, 0xcd, 0x9b, 0x6d, 0xd2, 0x9c, 0x63, 0x8a, 0xac, 0xc1, 0x74, 0x82, 0xad, 0x3c,
	0x8d, 0x0f, 0x68, 0x0f, 0x32, 0x94, 0x7b, 0xa2, 0x96, 0xae, 0xa7, 0x1b, 0xeb, 0xad, 0x47, 0xf7,
	0xc4, 0x5a, 0xd2, 0xd9, 0xd8, 0x84, 0x74, 0x97, 0x7b, 0x08, 0x41, 0xc6, 0x75, 0x02, 0x47, 0x49,
	0x92, 0x67, 0xf3, 0x19, 0xe4, 0xd5, 0x1d, 0x08, 0x20, 0x67, 0x1d, 0xf4, 0x4f, 0xba, 0x83, 0x6a,
	0x2a, 0x3a, 0xf7, 0x07, 0xed, 0xc1, 0x49, 0xbf, 0xaa, 0xa1, 0x02, 0x64, 0xdb, 0x6f, 0x0f, 0x8e,
	0x06, 0x55, 0xdd, 0xfc, 0xa1, 0x41, 0xa5, 0x17, 0x62, 0x7f, 0x7a, 0x23, 0xd9, 0x57, 0x90, 0xbf,
	0x08, 0xb1, 0x4f, 0xb0, 0xa8, 0x69, 0x52, 0xd4, 0x42, 0x42, 0x0b, 0xfe, 0xb1, 0x6d, 0x25, 0x31,
	0x2b, 0x14, 0xd8, 0x78, 0x0e, 0x59, 0x19, 0x84, 0xca, 0xa0, 0x13, 0x57, 0xc9, 0xd7, 0x89, 0x8b,
	0xfe, 0x83, 0x6c, 0x44, 0x33, 0x55, 0xbd, 0x14, 0x1b, 0xe6, 0x6f, 0x1d, 0xaa, 0x16, 0x16, 0x21,
	0x0d, 0x56, 0x7b, 0x92, 0x37, 0x90, 0xf7, 0xa5, 0xbb, 0xa8, 0xe9, 0x32, 0x81, 0x27, 0xf3, 0x09,
	0x2c, 0x72, 0x29, 0xc0, 0x4a, 0xa2, 0x8c, 0x6f, 0x3a, 0xe4, 0x62, 0xec, 0x96, 0xc2, 0x0e, 0x64,
	0x7c, 0x7e, 0x95, 0x10, 0xbf, 0x58, 0x89, 0x38, 0xe1, 0xe7, 0x57, 0x96, 0x0c, 0x46, 0xff, 0x43,
	0x4e, 0x04, 0x4e, 0x10, 0x0a, 0x39, 0x93, 0x59, 0x4b, 0x59, 0xc6, 0x77, 0x0d, 0x0a, 0x33, 0x5f,
	0x74, 0x0c, 0xf9, 0x11, 0xa7, 0xe1, 0x98, 0x25, 0xef, 0xf0, 0xf2, 0x2f, 0x6f, 0x6b, 0x76, 0x64,
	0xb8, 0x95, 0xd0, 0x18, 0x2d, 0xc8, 0xc5, 0x50, 0xd4, 0x39, 0xcc, 0x19, 0x27, 0x1b, 0x45, 0x9e,
	0xa3, 0xe2, 0x5f, 0x3a, 0x34, 0x4c, 0x36, 0x49, 0x6c, 0xb4, 0x7e, 0x66, 0x20, 0xdd, 0x9e, 0x10,
	0xf4, 0x19, 0x36, 0xd4, 0x82, 0xb8, 0x1e, 0x67, 0xb4, 0xd0, 0xae, 0xb7, 0x76, 0x89, 0x51, 0xbf,
	0xdb, 0x21, 0x9e, 0x5c, 0x33, 0x85, 0x8e, 0xa0, 0xa4, 0xdc, 0xe3, 0xa1, 0x46, 0x5b, 0xf3, 0x41,
	0x0b, 0x4b, 0xd6, 0x78, 0x38, 0xff, 0x79, 0x7e, 0x13, 0x98, 0x29, 0x74, 0x0c, 0x65, 0xe5, 0xda,
	0x53, 0x2d, 0x79, 0x0f, 0xe1, 0xd6, 0xd2, 0xfe, 0x36, 0x53, 0xa8, 0x0b, 0xeb, 0xc7, 0xe1, 0x90,
	0x12, 0x71, 0xd6, 0xe5, 0x9e, 0x40, 0x0f, 0x96, 0x0c, 0xa9, 0xb1, 0x7d, 0xd7, 0x5d, 0x33, 0x7d,
	0x16, 0x94, 0x15, 0x5b, 0xfc, 0x52, 0x02, 0x6d, 0x2f, 0x7f, 0xd8, 0x15, 0x38, 0x3f, 0x42, 0xf1,
	0x1d, 0x57, 0xf5, 0x0b, 0x7d, 0xfc, 0x4f, 0x25, 0xdc, 0xd5, 0x50, 0x4f, 0xd2, 0x51, 0xc2, 0xf0,
	0x3e, 0x25, 0xcc, 0xbb, 0x57, 0xe0, 0xf2, 0x0a, 0x36, 0xb4, 0x5d, 0x6d, 0x98, 0x93, 0xbf, 0xd0,
	0xbd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xc7, 0x9b, 0x73, 0x55, 0x07, 0x00, 0x00,
}
