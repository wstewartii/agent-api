syntax = "proto3";

package agentapi;

service AgentApi {

    //////////////////////
    // Core Service
    //////////////////////

    // Attempt to enroll a host with kolide/cloud
    rpc RequestEnrollment(EnrollmentRequest) returns (EnrollmentResponse) {}

    // request an updated configuration from kolide/cloud
    // a generic request object is sent
    rpc RequestConfig(AgentApiRequest) returns (ConfigResponse) {}

    // request/pull Dist queries from kolide/cloud
    // a generic request object is sent
    rpc RequestQueries(AgentApiRequest) returns (QueryCollection) {}

    // publish logs from osqueryd to kolide/cloud
    // a generic response object is returned
    rpc PublishLogs(LogCollection) returns (AgentApiResponse) {}

    // publish results from Dist queries to kolide/cloud
    // a generic response object is returned
    rpc PublishResults(ResultCollection) returns (AgentApiResponse) {}


    //////////////////////
    // Live-Link and BIDI stuff
    //////////////////////
    
    //pushed configurations
    rpc HotConfigure(AgentApiRequest) returns (stream ConfigResponse);
    // this would be live query push to agent, and response back to kolide/cloud
    rpc HotlineBling(stream ResultCollection) returns (stream QueryCollection);
}


//////////////////////
// Generics
//////////////////////

message AgentApiRequest {
    string node_key = 1;
    string agent_version = 2;
}

message AgentApiResponse {
     string message=1;
     string error_code = 2;
     bool node_invalid = 3;
}


//////////////////////
// Enrollment
//////////////////////

message EnrollmentRequest {
    string enroll_secret = 1;
    string host_identifier = 2;
}

message EnrollmentResponse {
    string node_key = 1;
    bool node_invalid = 2;
}


//////////////////////
// Configuration
//////////////////////

// kolide/cloud will be generating well-structured json already, so forward
// it along instead of de/re/de-serializing it as a protobuf too
// this might make sense to convert to full proto later
message ConfigResponse {
    string config_json_blob = 1;
    bool node_invalid = 2;
}


//////////////////////
// Logging
//////////////////////

message LogCollection {
    string node_key = 1;
    LogType log_type = 2;
    repeated Log logs = 3;

    // AGENT is added as a new log type, for adding new
    // logging capabilities from kolide/agent
    enum LogType {
        RESULT = 0;
        STATUS = 1;
        AGENT  = 2;
    }

    message Log {
        string data = 1;
    }
}


//////////////////////
// Requested Queries
//////////////////////

// a query collection contains many queries
message QueryCollection {
    repeated Query queries = 1;
    bool node_invalid = 2;

    message Query {
        string id = 1;
        string query = 2;
    }
}


//////////////////////
// Query Results
//////////////////////

// a result collection contains many results
message ResultCollection {
    string node_key = 1;
    repeated Result results = 2;

    // status is moved here instead of appearing as a map of id[status]
    // on the ResultCollection, as it does in the osq docs
    message Result {
        string id = 1;
        repeated ResultRow rows = 2;
        int32 status = 3;

        message ResultRow {
            repeated Column columns = 1;

            message Column {
                string name = 1;
                string value = 2;
            }
        }
    }
}

//////////////////////
// generate code
//////////////////////

// go
// protoc -I=. ./agent_api.proto --go_out=plugins=grpc:.

// ruby
// grpc_tools_ruby_protoc -I ./ --ruby_out=. --grpc_out=. ./agent_api.proto
